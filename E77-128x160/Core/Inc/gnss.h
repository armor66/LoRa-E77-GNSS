#ifndef GNSS_HEADER
#define GNSS_HEADER

//#include <stdint.h>

#define TREKPOINTS_ON_DISPLAY	(8)

#define TREKPOINTS_TOTAL (1)
//~20m gap
static const float latitude_array []={0};

static const float longitude_array[]={0};

struct trekpoints_struct
{
//RELATIVE COORDINATES
    uint32_t distance;

    int16_t azimuth_deg_signed;
    double azimuth_rad;
    double azimuth_relative_rad;
};

struct trekpoints_struct **get_trekpoints(void);

//set to RAM only:  CFG-RATE-MEAS=3000, CFG-TP-PERIOD_TP1=3.000.000, CFG-TP-PERIOD_LOCK_TP1=3.000.000
/*const uint8_t set_three_seconds[] = {0xB5, 0x62, 0x06, 0x8A, 0x1A, 0x00, 0x00, 0x01, 0x00, 0x00, 0x01, 0x00, 0x21, 0x30, 0xB8,
		0x0B, 0x02, 0x00, 0x05, 0x40, 0xC0, 0xC6, 0x2D, 0x00, 0x03, 0x00, 0x05, 0x40, 0xC0, 0xC6, 0x2D, 0x00, 0xB5, 0x38};*/
//perhaps not need: CFG-RATE-MEAS=1000, CFG-TP-PERIOD_TP1=1.000.000, CFG-TP-PERIOD_LOCK_TP1=1.000.000
/*const uint8_t set_one_second[]    = {0xB5, 0x62, 0x06, 0x8A, 0x1A, 0x00, 0x00, 0x01, 0x00, 0x00, 0x01, 0x00, 0x21, 0x30, 0xE8,
		0x03, 0x02, 0x00, 0x05, 0x40, 0x40, 0x42, 0x0F, 0x00, 0x03, 0x00, 0x05, 0x40, 0x40, 0x42, 0x0F, 0x00, 0x99, 0x70};*/
//set to RAM only: CFG-TP-PERIOD_LOCK_TP1=3.000.000
static const uint8_t set_three_seconds[] = {0xB5, 0x62, 0x06, 0x8A, 0x0C, 0x00, 0x00, 0x01, 0x00, 0x00, 0x03, 0x00, 0x05, 0x40, 0xC0, 0xC6, 0x2D, 0x00, 0x98, 0x4B};
static const uint8_t set_one_second[]    = {0xB5, 0x62, 0x06, 0x8A, 0x0C, 0x00, 0x00, 0x01, 0x00, 0x00, 0x03, 0x00, 0x05, 0x40, 0x40, 0x42, 0x0F, 0x00, 0x76, 0x83};
void serialPrint(const uint8_t *pBuffer, uint8_t size);

typedef enum {
	GPS_BAUDRATE_9600 = 0,
	GPS_BAUDRATE_19200,
    GPS_BAUDRATE_38400,
	GPS_BAUDRATE_57600,
	GPS_BAUDRATE_115200,
	GPS_BAUDRATE_230400,
	BAUDRATE_MAX_IND = GPS_BAUDRATE_230400
} gpsBaudRate_e;

void init_gnss(void);

void find_nearest_trekpoint(void);

void manage_trekpoints(uint8_t range_ind);

#endif /*GNSS_HEADER*/
